<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Limbo&#39;s Wiki</title>
  
  
  <link href="/wiki/atom.xml" rel="self"/>
  
  <link href="http://taizilongxu.github.io/wiki/"/>
  <updated>2020-08-02T16:49:35.000Z</updated>
  <id>http://taizilongxu.github.io/wiki/</id>
  
  <author>
    <name>Limbo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LDAP</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/%E6%9D%82%E9%A1%B9/ldap/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/%E6%9D%82%E9%A1%B9/ldap/</id>
    <published>2020-08-02T16:49:35.000Z</published>
    <updated>2020-08-02T16:49:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>LDAP (Lightweight Directory Access Protocol) 轻型目录访问<strong>协议</strong></p><p>主要用于单点登录(SSO)</p><h2 id="两种实现"><a href="#两种实现" class="headerlink" title="两种实现"></a>两种实现</h2><p>OpenLDAP 和 ActiveDirectory(微软的域控制器)</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li>目录树: 目录服务为树形</li><li>条目: 每个记录叫做条目, 每个条目又唯一的可区别名称(distinguished name, DN)</li><li>对象类: 类比语言中的 class</li><li>属性: 类比语言重的类属性</li></ol><h2 id="目录树结构"><a href="#目录树结构" class="headerlink" title="目录树结构"></a>目录树结构</h2><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/ldap_tree.png" alt=""></p><h2 id="LDAP-属性"><a href="#LDAP-属性" class="headerlink" title="LDAP 属性"></a>LDAP 属性</h2><table><thead><tr><th align="center">属性</th><th align="center">英文</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">DC</td><td align="center">Domain Component</td><td align="center">域名的部分，其格式是将完整的域名分成几部分，如域名为example.com变成dc=example,dc=com（一条记录的所属位置）</td></tr><tr><td align="center">UID</td><td align="center">User Id</td><td align="center">用户ID songtao.xu（一条记录的ID）</td></tr><tr><td align="center">OU</td><td align="center">Organization Unit</td><td align="center">组织单位，组织单位可以包含其他各种对象（包括其他组织单元），如“oa组”（一条记录的所属组织）</td></tr><tr><td align="center">CN</td><td align="center">Common Name</td><td align="center">公共名称，如“Thomas Johansson”（一条记录的名称）</td></tr><tr><td align="center">DN</td><td align="center">Distinguished Name</td><td align="center">“uid=songtao.xu,ou=oa组,dc=example,dc=com”，一条记录的位置（唯一）</td></tr></tbody></table><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>大致说下原理, 无非就是根据树形结构检索要查询的用户比对密码, </p><p>一般程序会设置一个 baseDN, 是整个 LDAP 管理者账号的信息</p><p>然后会设置一个 userDN, 是查询用户信息的树结构地址, 这两个地址节点越多代表搜索范围越小,</p><p>还会有一个用户组 group 查询, 这3个都差不多</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;LDAP (Lightweight Directory Access Protocol) 轻型目录访问&lt;strong&gt;协议&lt;/strong&gt;
      
    
    </summary>
    
    
      <category term="杂项" scheme="http://taizilongxu.github.io/wiki/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>威士忌</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/%E7%94%9F%E6%B4%BB/whiskey/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/%E7%94%9F%E6%B4%BB/whiskey/</id>
    <published>2020-08-02T16:28:10.000Z</published>
    <updated>2020-08-02T16:28:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>威士忌:</p><ul><li>酿造原料必须是谷物, 比如大麦</li><li>一定是蒸馏酒</li><li>必须在橡木桶种陈年储藏</li></ul><p>按原料分类:</p><ul><li>单一麦芽 Single Malt: 只用水和大麦麦芽, 不加任何谷物</li><li>单一谷物 Single Grain: 除了大麦加入其他谷物, 例如玉米, 小麦或者未做发芽处理的大麦</li><li>调和纯麦 Blended Malt: 至少两个单一麦芽</li><li>调和谷物 Blended Grain: 至少两家单一谷物</li><li>调和 Blended: 至少一种单一谷物和至少一种单一麦芽</li></ul><p>按产地分类:</p><ul><li>英格兰</li><li>苏格兰</li><li>美国</li><li>加拿大</li><li>日本</li></ul><h2 id="平民酒"><a href="#平民酒" class="headerlink" title="平民酒"></a>平民酒</h2><table><thead><tr><th>产地</th><th>品牌</th><th>容量</th><th>种类</th><th>价格</th><th>口感</th></tr></thead><tbody><tr><td>苏格兰</td><td>格兰 Grant’s 雪莉珍藏</td><td>700ml</td><td>调和威士忌</td><td>60</td><td>口粮酒, 单喝不错, 泥煤加雪莉</td></tr><tr><td>苏格兰</td><td>百龄坛 Ballantine’s 特纯</td><td>500ml</td><td>调和威士忌</td><td>50</td><td>单喝不好喝, 可能得兑点东西</td></tr><tr><td>苏格兰</td><td>高司令 High Commissioner</td><td>200ml</td><td>调和纯麦</td><td>20</td><td>口粮酒, 一般, 便宜</td></tr><tr><td>英格兰</td><td>尊尼获加 Johnnie Walker 黑方</td><td>700ml</td><td>调和威士忌</td><td></td><td></td></tr><tr><td>英格兰</td><td>尊尼获加 Johnnie Walker 绿方</td><td>700ml</td><td>调和威士忌</td><td></td><td></td></tr><tr><td>英格兰</td><td>尊尼获加 Johnnie Walker 红方</td><td>700ml</td><td>调和威士忌</td><td></td><td></td></tr><tr><td>英格兰</td><td>尊尼获加 Johnnie Walker 绿方</td><td>700ml</td><td>调和威士忌</td><td></td><td></td></tr><tr><td>美国田纳西</td><td>杰克丹尼 Jack Daniel’s</td><td>700ml</td><td>调和威士忌</td><td>110</td><td></td></tr><tr><td>台湾</td><td>金车噶玛兰 KAVALAN 珍选</td><td>700ml</td><td>单一麦芽</td><td>200</td><td>不太喜欢, 有点烈</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;威士忌:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;酿造原料必须是谷物, 比如大麦&lt;/li&gt;
&lt;li&gt;一定是蒸馏酒&lt;/li&gt;
&lt;li&gt;必须在橡木桶种陈年储藏&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按原料分类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一麦芽 Single Malt: 只用水和大麦麦芽, 不加任何
      
    
    </summary>
    
    
      <category term="生活" scheme="http://taizilongxu.github.io/wiki/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Helmet</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/%E7%94%9F%E6%B4%BB/helmet/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/%E7%94%9F%E6%B4%BB/helmet/</id>
    <published>2020-08-02T16:27:22.000Z</published>
    <updated>2020-08-02T16:27:22.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">品牌</th><th align="center">型号</th><th align="center">又名</th><th align="center">重量</th><th align="center">Snell 认证</th><th align="center">Sharp 认证</th><th align="center">价格</th></tr></thead><tbody><tr><td align="center">Shoei</td><td align="center">x14</td><td align="center"></td><td align="center">1400+-50g</td><td align="center">√</td><td align="center"></td><td align="center">4280/5000</td></tr><tr><td align="center"></td><td align="center">z7</td><td align="center">NXR</td><td align="center">1310~1470g</td><td align="center"></td><td align="center">⭐⭐⭐⭐</td><td align="center">2780/3250</td></tr><tr><td align="center"></td><td align="center">GT-AIR</td><td align="center"></td><td align="center">1615g</td><td align="center"></td><td align="center">⭐⭐⭐</td><td align="center"></td></tr><tr><td align="center">Arai</td><td align="center">rx7x</td><td align="center">rx-7v</td><td align="center"></td><td align="center">√</td><td align="center"></td><td align="center">3380/3900</td></tr><tr><td align="center"></td><td align="center">xd</td><td align="center"></td><td align="center">1595-1675g</td><td align="center">√</td><td align="center"></td><td align="center">3100/3700</td></tr><tr><td align="center"></td><td align="center">Quantum</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">⭐⭐⭐</td><td align="center"></td></tr><tr><td align="center">Hjc</td><td align="center">RPHA11</td><td align="center"></td><td align="center">1350+-50g</td><td align="center"></td><td align="center">⭐⭐⭐</td><td align="center">4500</td></tr><tr><td align="center"></td><td align="center">c70</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">⭐⭐⭐⭐⭐</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">i70</td><td align="center"></td><td align="center">1600+-50g</td><td align="center"></td><td align="center">⭐⭐⭐⭐</td><td align="center">1400</td></tr></tbody></table><p>snell 认证: <a href="https://www.smf.org/cert" target="_blank" rel="noopener">https://www.smf.org/cert</a></p><p>sharp 认证: <a href="https://sharp.dft.gov.uk/" target="_blank" rel="noopener">https://sharp.dft.gov.uk/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;品牌&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;型号&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;又名&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;重量&lt;/th&gt;
&lt;th align=&quot;
      
    
    </summary>
    
    
      <category term="生活" scheme="http://taizilongxu.github.io/wiki/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>auth</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/auth/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/auth/</id>
    <published>2020-06-23T07:33:47.050Z</published>
    <updated>2020-06-23T07:37:39.441Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Authentication(鉴定): Kerberros</p></li><li><p>User/Group Mapping:  LDAP</p></li><li><p>Authorization(授权): Ranger</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Authentication(鉴定): Kerberros&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User/Group Mapping:  LDAP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Authorization(授权): Ranger&lt;/p&gt;
&lt;/li&gt;
&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>zookeeper</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/zookeeper/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/zookeeper/</id>
    <published>2020-06-03T06:28:36.612Z</published>
    <updated>2020-07-09T04:21:45.480Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hbase</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/hbase/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/hbase/</id>
    <published>2020-06-03T06:28:32.013Z</published>
    <updated>2020-06-05T13:11:14.787Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料:</p><ul><li><a href="http://iambigboss.top/post/72413_1_1.html" target="_blank" rel="noopener">http://iambigboss.top/post/72413_1_1.html</a></li><li><a href="https://cshihong.github.io/2018/05/17/HBase技术原理/" target="_blank" rel="noopener">https://cshihong.github.io/2018/05/17/HBase%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考资料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://iambigboss.top/post/72413_1_1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://iambigboss.top/post/72413_1_
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>博物馆</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/%E7%94%9F%E6%B4%BB/museum/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/%E7%94%9F%E6%B4%BB/museum/</id>
    <published>2020-06-01T05:11:43.489Z</published>
    <updated>2020-06-01T05:19:50.045Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>名称</th><th>网址</th><th></th></tr></thead><tbody><tr><td>中国园林博物馆</td><td><a href="http://www.gardensmuseum.cn/" target="_blank" rel="noopener">http://www.gardensmuseum.cn/</a></td><td></td></tr><tr><td>中国国家博物馆</td><td><a href="http://www.chnmuseum.cn/" target="_blank" rel="noopener">http://www.chnmuseum.cn/</a></td><td></td></tr><tr><td>故宫博物院</td><td><a href="https://www.dpm.org.cn/" target="_blank" rel="noopener">https://www.dpm.org.cn/</a></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;网址&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;中国园林博物馆&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.gardensmuseum.cn/
      
    
    </summary>
    
    
      <category term="生活" scheme="http://taizilongxu.github.io/wiki/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>LVS(Linux Virtual Server)</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/lvs/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/lvs/</id>
    <published>2020-05-03T18:42:14.000Z</published>
    <updated>2020-07-09T04:21:05.783Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料:</p><ul><li><a href="https://www.cnblogs.com/walkman-sky/p/12197805.html" target="_blank" rel="noopener">https://www.cnblogs.com/walkman-sky/p/12197805.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考资料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/walkman-sky/p/12197805.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/w
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://taizilongxu.github.io/wiki/wiki/Network/virtual_IP_address/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/Network/virtual_IP_address/</id>
    <published>2020-05-03T18:41:29.000Z</published>
    <updated>2020-06-01T12:29:07.639Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料:</p><ul><li><a href="https://www.zhihu.com/question/67682565" target="_blank" rel="noopener">https://www.zhihu.com/question/67682565</a></li><li><a href="http://xiaobaoqiu.github.io/blog/2015/04/02/xu-ni-iphe-ippiao-yi/" target="_blank" rel="noopener">http://xiaobaoqiu.github.io/blog/2015/04/02/xu-ni-iphe-ippiao-yi/</a></li></ul><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/20200504014915.png" alt=""></p><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/20200504014937.png" alt=""></p><h2 id="虚拟-IP"><a href="#虚拟-IP" class="headerlink" title="虚拟 IP"></a>虚拟 IP</h2><p>只是通过 ARP 协议协调路由达到主备切换</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考资料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/67682565&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/676825
      
    
    </summary>
    
    
      <category term="Network" scheme="http://taizilongxu.github.io/wiki/categories/Network/"/>
    
    
  </entry>
  
  <entry>
    <title>python 内存</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/Python/pythonMemory/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/Python/pythonMemory/</id>
    <published>2020-05-03T17:34:48.000Z</published>
    <updated>2020-05-03T17:34:48.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://docs.python.org/3/c-api/memory.html" target="_blank" rel="noopener">https://docs.python.org/3/c-api/memory.html</a></p></li><li><p><a href="https://realpython.com/python-memory-management/" target="_blank" rel="noopener">https://realpython.com/python-memory-management/</a></p></li><li><p><a href="https://rushter.com/blog/python-memory-managment/" target="_blank" rel="noopener">https://rushter.com/blog/python-memory-managment/</a></p></li><li><p><a href="https://github.com/zpoint/CPython-Internals/blob/master/Interpreter/memory_management/memory_management_cn.md" target="_blank" rel="noopener">https://github.com/zpoint/CPython-Internals/blob/master/Interpreter/memory_management/memory_management_cn.md</a></p></li></ul><p><a href="https://github.com/python/cpython/blob/ad051cbce1360ad3055a048506c09bc2a5442474/Objects/obmalloc.c#L534" target="_blank" rel="noopener">代码</a></p><h2 id="内存池机制"><a href="#内存池机制" class="headerlink" title="内存池机制"></a>内存池机制</h2><ul><li>大内存使用 malloc 分配</li><li>小内存使用内存池分配</li><li>Python 内存池<ul><li>第3层: 最上层, 用户对 Python 对象操作</li><li>第1/2层: 内存池，由 Python 的接口函数 PyMem_Malloc 实现—–若请求分配的内存在1~256字节之间就使用内存池管理系统进行分配，调用malloc函数分配内存，但是每次只会分配一块大小为256K的大块内存，不会调用free函数释放内存，将该内存块留在内存池中以便下次使用。</li><li>第 0 层: 大内存, 若请求分配的内存大于256K，malloc函数分配内存，free函数释放内存</li><li>第 -1/-2 层: 操作系统进行操作</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/20200406072521.png" alt=""></p><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/20200406164728.png" alt=""></p><h3 id="三层结构"><a href="#三层结构" class="headerlink" title="三层结构"></a>三层结构</h3><ul><li>Arena: 直接向系统申请空间</li><li>Pool: 相同大小 block 集合, 总大小和系统 memory page 相同(4kb)</li><li>block: 最小分配单位</li></ul><p>说明: Arena 会一次性创建 16 个, 每个 Areana 含 64 个 pool</p><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/python_memory.png" alt=""></p><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/python_gc_xmind.png" alt=""></p><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>ref += 1</p><h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>核心原理: </p><ul><li>标记阶段: 标记所有引用为 1 的对象为 unreachable, 然后对不为 1 的对象进行调用遍历,如果被引用则将整个引用链上的对象对象从 unreachable 状态变为 reacheable </li><li>清除阶段: 删除 unreachable 对象</li></ul><p><strong>上面描述的垃圾回收的阶段，会暂停整个应用程序，等待标记清除结束后才会恢复应用程序的运行。</strong></p><h3 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h3><p>在程序里存货时间越久, 扫描越少</p><p>分为 0, 1, 2 总共 3 代</p><p>查看和调整函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gc.get_threshold() <span class="comment"># (threshold0, threshold1, threshold2).</span></span><br><span class="line">gc.set_threshold(threshold0[, threshold1[, threshold2]])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/c-api/memory.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.python.org/3/c-api/memory.html
      
    
    </summary>
    
    
      <category term="Python" scheme="http://taizilongxu.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Dict</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/Python/pythoDict/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/Python/pythoDict/</id>
    <published>2020-04-04T11:29:17.000Z</published>
    <updated>2020-04-04T11:29:17.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://www.python.org/dev/peps/pep-0412/" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0412/</a></p></li><li><p><a href="https://flaggo.github.io/python3-source-code-analysis/objects/dict-object/" target="_blank" rel="noopener">https://flaggo.github.io/python3-source-code-analysis/objects/dict-object/</a></p></li><li><p><a href="https://www.slideshare.net/delimitry/python-dictionary-past-present-future" target="_blank" rel="noopener">https://www.slideshare.net/delimitry/python-dictionary-past-present-future</a></p></li><li><p><a href="https://github.com/zpoint/CPython-Internals/blob/master/BasicObject/dict/dict_cn.md" target="_blank" rel="noopener">https://github.com/zpoint/CPython-Internals/blob/master/BasicObject/dict/dict_cn.md</a></p></li></ul><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/python_dict.png" alt=""></p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>代码位置: <code>Include/cpython/dictobject.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Number of items in the dictionary */</span></span><br><span class="line">    Py_ssize_t ma_used;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Dictionary version: globally unique, value change each time</span></span><br><span class="line"><span class="comment">       the dictionary is modified */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> ma_version_tag;</span><br><span class="line"></span><br><span class="line">    PyDictKeysObject *ma_keys;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If ma_values is NULL, the table is "combined": keys and values</span></span><br><span class="line"><span class="comment">       are stored in ma_keys.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       If ma_values is not NULL, the table is splitted:</span></span><br><span class="line"><span class="comment">       keys are stored in ma_keys and values are stored in ma_values */</span></span><br><span class="line">    PyObject **ma_values;</span><br><span class="line">&#125; PyDictObject;</span><br></pre></td></tr></table></figure><p>代码位置: <code>Objects/dict-common.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PyDictKeysObject</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">dictkeysobject</span> &#123;</span></span><br><span class="line">    Py_ssize_t dk_refcnt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Size of the hash table (dk_indices). It must be a power of 2. */</span></span><br><span class="line">    Py_ssize_t dk_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Function to lookup in the hash table (dk_indices):</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       - lookdict(): general-purpose, and may return DKIX_ERROR if (and</span></span><br><span class="line"><span class="comment">         only if) a comparison raises an exception.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       - lookdict_unicode(): specialized to Unicode string keys, comparison of</span></span><br><span class="line"><span class="comment">         which can never raise an exception; that function can never return</span></span><br><span class="line"><span class="comment">         DKIX_ERROR.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       - lookdict_unicode_nodummy(): similar to lookdict_unicode() but further</span></span><br><span class="line"><span class="comment">         specialized for Unicode string keys that cannot be the &lt;dummy&gt; value.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       - lookdict_split(): Version of lookdict() for split tables. */</span></span><br><span class="line">    dict_lookup_func dk_lookup;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Number of usable entries in dk_entries. */</span></span><br><span class="line">    Py_ssize_t dk_usable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Number of used entries in dk_entries. */</span></span><br><span class="line">    Py_ssize_t dk_nentries;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Actual hash table of dk_size entries. It holds indices in dk_entries,</span></span><br><span class="line"><span class="comment">       or DKIX_EMPTY(-1) or DKIX_DUMMY(-2).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Indices must be: 0 &lt;= indice &lt; USABLE_FRACTION(dk_size).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       The size in bytes of an indice depends on dk_size:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       - 1 byte if dk_size &lt;= 0xff (char*)</span></span><br><span class="line"><span class="comment">       - 2 bytes if dk_size &lt;= 0xffff (int16_t*)</span></span><br><span class="line"><span class="comment">       - 4 bytes if dk_size &lt;= 0xffffffff (int32_t*)</span></span><br><span class="line"><span class="comment">       - 8 bytes otherwise (int64_t*)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Dynamically sized, SIZEOF_VOID_P is minimum. */</span></span><br><span class="line">    <span class="keyword">char</span> dk_indices[];  <span class="comment">/* char is required to avoid strict aliasing. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* "PyDictKeyEntry dk_entries[dk_usable];" array follows:</span></span><br><span class="line"><span class="comment">       see the DK_ENTRIES() macro */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代码位置: <code>Objects/dict-common.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* Cached hash code of me_key. */</span></span><br><span class="line">    Py_hash_t me_hash;</span><br><span class="line">    PyObject *me_key;</span><br><span class="line">    PyObject *me_value; <span class="comment">/* This field is only meaningful for combined tables */</span></span><br><span class="line">&#125; PyDictKeyEntry</span><br></pre></td></tr></table></figure><h3 id="Type类型"><a href="#Type类型" class="headerlink" title="Type类型"></a>Type类型</h3><p>代码位置: <code>Objects/dictobject.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">PyTypeObject PyDict_Type = &#123;</span><br><span class="line">    PyVarObject_HEAD_INIT(&amp;PyType_Type, <span class="number">0</span>)</span><br><span class="line">    <span class="string">"dict"</span>,</span><br><span class="line">    <span class="keyword">sizeof</span>(PyDictObject),</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    (destructor)dict_dealloc,                   <span class="comment">/* tp_dealloc */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_vectorcall_offset */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_getattr */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_setattr */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_as_async */</span></span><br><span class="line">    (reprfunc)dict_repr,                        <span class="comment">/* tp_repr */</span></span><br><span class="line">    &amp;dict_as_number,                            <span class="comment">/* tp_as_number */</span></span><br><span class="line">    &amp;dict_as_sequence,                          <span class="comment">/* tp_as_sequence */</span></span><br><span class="line">    &amp;dict_as_mapping,                           <span class="comment">/* tp_as_mapping */</span></span><br><span class="line">    PyObject_HashNotImplemented,                <span class="comment">/* tp_hash */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_call */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_str */</span></span><br><span class="line">    PyObject_GenericGetAttr,                    <span class="comment">/* tp_getattro */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_setattro */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_as_buffer */</span></span><br><span class="line">    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC |</span><br><span class="line">        Py_TPFLAGS_BASETYPE | Py_TPFLAGS_DICT_SUBCLASS,         <span class="comment">/* tp_flags */</span></span><br><span class="line">    dictionary_doc,                             <span class="comment">/* tp_doc */</span></span><br><span class="line">    dict_traverse,                              <span class="comment">/* tp_traverse */</span></span><br><span class="line">    dict_tp_clear,                              <span class="comment">/* tp_clear */</span></span><br><span class="line">    dict_richcompare,                           <span class="comment">/* tp_richcompare */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_weaklistoffset */</span></span><br><span class="line">    (getiterfunc)dict_iter,                     <span class="comment">/* tp_iter */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_iternext */</span></span><br><span class="line">    mapp_methods,                               <span class="comment">/* tp_methods */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_members */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_getset */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_base */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_dict */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_descr_get */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_descr_set */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_dictoffset */</span></span><br><span class="line">    dict_init,                                  <span class="comment">/* tp_init */</span></span><br><span class="line">    PyType_GenericAlloc,                        <span class="comment">/* tp_alloc */</span></span><br><span class="line">    dict_new,                                   <span class="comment">/* tp_new */</span></span><br><span class="line">    PyObject_GC_Del,                            <span class="comment">/* tp_free */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="C-接口"><a href="#C-接口" class="headerlink" title="C 接口"></a>C 接口</h3><p>代码位置: <code>Include/dictobject.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PyObject *</span><br><span class="line">PyDict_New(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    dictkeys_incref(Py_EMPTY_KEYS);</span><br><span class="line">    <span class="keyword">return</span> new_dict(Py_EMPTY_KEYS, empty_values);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> PyDictKeysObject empty_keys_struct = &#123;</span><br><span class="line">        <span class="number">1</span>, <span class="comment">/* dk_refcnt */</span></span><br><span class="line">        <span class="number">1</span>, <span class="comment">/* dk_size */</span></span><br><span class="line">        lookdict_split, <span class="comment">/* dk_lookup */</span></span><br><span class="line">        <span class="number">0</span>, <span class="comment">/* dk_usable (immutable) */</span></span><br><span class="line">        <span class="number">0</span>, <span class="comment">/* dk_nentries */</span></span><br><span class="line">        &#123;DKIX_EMPTY, DKIX_EMPTY, DKIX_EMPTY, DKIX_EMPTY,</span><br><span class="line">         DKIX_EMPTY, DKIX_EMPTY, DKIX_EMPTY, DKIX_EMPTY&#125;, <span class="comment">/* dk_indices */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>初始化 dict 大小为 <code>8</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0412/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.python.org/dev/peps/pep-0412/&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Python" scheme="http://taizilongxu.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>食材</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/%E7%94%9F%E6%B4%BB/food/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/%E7%94%9F%E6%B4%BB/food/</id>
    <published>2020-04-03T16:26:47.000Z</published>
    <updated>2020-04-03T16:26:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><ul><li>电饭锅</li><li>电磁炉: 米家电磁炉青春版</li><li>煎锅, 雪平锅</li><li>厨房纸</li><li>砧板</li><li>刀具: 三德刀基本够用, 后期升级可以加个切片刀</li></ul><h2 id="拌料"><a href="#拌料" class="headerlink" title="拌料"></a>拌料</h2><ul><li>橄榄油, PAM喷油</li><li>黑胡椒</li><li>孜然</li><li>盐</li><li>酱油</li><li>料酒</li><li>耗油</li><li>卡真粉</li><li>迷迭香</li></ul><h2 id="热量计算公式"><a href="#热量计算公式" class="headerlink" title="热量计算公式"></a>热量计算公式</h2><p>1大卡 = 4.184 千焦</p><h2 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h2><p>蛋白质</p><table><thead><tr><th align="center">名称</th><th align="center">GI</th><th align="center">热量大卡</th><th align="center">常温存储</th><th align="center">冷藏存储</th><th align="center">冷冻存储</th></tr></thead><tbody><tr><td align="center">牛肉🐂</td><td align="center">46</td><td align="center">318</td><td align="center">2小时</td><td align="center">1-2天</td><td align="center">6-8月</td></tr><tr><td align="center">鸡胸肉🐓</td><td align="center">45</td><td align="center">200</td><td align="center">2小时</td><td align="center">1-2天</td><td align="center">1年</td></tr><tr><td align="center">龙利鱼🐟</td><td align="center">40</td><td align="center">67</td><td align="center">2小时</td><td align="center">1-2天</td><td align="center">6-9月</td></tr><tr><td align="center">金枪鱼🐟</td><td align="center">40</td><td align="center">99</td><td align="center">2小时</td><td align="center">1-2天</td><td align="center">6-9月</td></tr><tr><td align="center">沙丁鱼🐟</td><td align="center">40</td><td align="center">89</td><td align="center">2小时</td><td align="center">1-2天</td><td align="center">6-9月</td></tr><tr><td align="center">虾仁🍤</td><td align="center">40</td><td align="center">83</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">鸡蛋🥚</td><td align="center">30</td><td align="center">151</td><td align="center">数小时</td><td align="center">3-4周</td><td align="center">不可</td></tr><tr><td align="center">牛奶🥛</td><td align="center">25</td><td align="center">67</td><td align="center">数小时</td><td align="center">5-7天</td><td align="center">1个月</td></tr><tr><td align="center">培根🥓</td><td align="center">49</td><td align="center">405</td><td align="center">2小时</td><td align="center">2周</td><td align="center">4个月</td></tr></tbody></table><p>蔬菜</p><table><thead><tr><th align="center">名称</th><th align="center">GI</th><th align="center">热量大卡</th><th align="center">常温存储</th><th align="center">冷藏存储</th><th align="center">冷冻存储</th></tr></thead><tbody><tr><td align="center">玉米🌽</td><td align="center">70</td><td align="center">92</td><td align="center">1-3天</td><td align="center">1-2周</td><td align="center">3-5月</td></tr><tr><td align="center">红萝卜🥕</td><td align="center">80</td><td align="center">37</td><td align="center">4天</td><td align="center">4-5周</td><td align="center">8-12月</td></tr><tr><td align="center">马铃薯🥔</td><td align="center">90</td><td align="center">65</td><td align="center">1个月</td><td align="center">3-4月</td><td align="center">不可冷冻</td></tr><tr><td align="center">红薯</td><td align="center">76</td><td align="center">61</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">山药</td><td align="center">75</td><td align="center">50</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">番茄🍅</td><td align="center">30</td><td align="center">19</td><td align="center">5-7天</td><td align="center">2周</td><td align="center">8-12月</td></tr><tr><td align="center">黄瓜🥒</td><td align="center">23</td><td align="center">14</td><td align="center">1-3天</td><td align="center">1周</td><td align="center">8-12月</td></tr><tr><td align="center">西兰花🥦</td><td align="center">25</td><td align="center">36</td><td align="center">2天</td><td align="center">7-14天</td><td align="center">8-12月</td></tr><tr><td align="center">南瓜🎃</td><td align="center">65</td><td align="center">91</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>主食</p><table><thead><tr><th align="center">名称</th><th align="center">GI</th><th align="center">热量大卡</th></tr></thead><tbody><tr><td align="center">米饭🍚</td><td align="center">84</td><td align="center">356</td></tr><tr><td align="center">馒头</td><td align="center">88</td><td align="center">233</td></tr><tr><td align="center">糙米🍚</td><td align="center">56</td><td align="center">350</td></tr><tr><td align="center">燕麦🥣</td><td align="center">55</td><td align="center">380</td></tr><tr><td align="center">全麦面包🍞</td><td align="center">50</td><td align="center">378</td></tr><tr><td align="center">黑麦面包🍞</td><td align="center">58</td><td align="center">264</td></tr><tr><td align="center">意大利面🍝</td><td align="center">55</td><td align="center">378</td></tr><tr><td align="center">荞麦面🍝</td><td align="center">59</td><td align="center">274</td></tr></tbody></table><p>水果</p><table><thead><tr><th align="center">名称</th><th align="center">GI</th><th align="center">热量大卡</th><th align="center">常温存储</th><th align="center">冷藏存储</th><th align="center">冷冻存储</th></tr></thead><tbody><tr><td align="center">香蕉🍌</td><td align="center">55</td><td align="center">154</td><td align="center">2-7天</td><td align="center">5-9天</td><td align="center">2-3个月</td></tr><tr><td align="center">芒果🥭</td><td align="center">49</td><td align="center">64</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">哈密瓜🍈</td><td align="center">41</td><td align="center">42</td><td align="center">熟透之前</td><td align="center">1周</td><td align="center">8-12月</td></tr><tr><td align="center">桃子🍑</td><td align="center">41</td><td align="center">40</td><td align="center">熟透之前</td><td align="center">2-5天</td><td align="center">8-12个月</td></tr><tr><td align="center">苹果🍎</td><td align="center">36</td><td align="center">54</td><td align="center">2-4周</td><td align="center">1-2月</td><td align="center">8-12月</td></tr><tr><td align="center">奇异果🥝</td><td align="center">35</td><td align="center">35</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">梨🍐</td><td align="center">32</td><td align="center">43</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">木瓜</td><td align="center">30</td><td align="center">38</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">橙子🍊</td><td align="center">31</td><td align="center">46</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">橘子🍊</td><td align="center">31</td><td align="center">60</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">柠檬🍋</td><td align="center">34</td><td align="center">54</td><td align="center">2-4周</td><td align="center">1-2月</td><td align="center">3-4月</td></tr><tr><td align="center">草莓🍓</td><td align="center">29</td><td align="center">34</td><td align="center">1-2天</td><td align="center">5-7天</td><td align="center">6-8个月</td></tr><tr><td align="center">葡萄🍇</td><td align="center">50</td><td align="center">55</td><td align="center">3-5天</td><td align="center">7-10天</td><td align="center">3-5个月</td></tr></tbody></table><h2 id="健身餐"><a href="#健身餐" class="headerlink" title="健身餐"></a>健身餐</h2><h3 id="牛排"><a href="#牛排" class="headerlink" title="牛排"></a>牛排</h3><p>素材</p><ul><li><p>牛排</p></li><li><p>橄榄油</p></li><li><p>黑胡椒</p></li><li><p>盐</p></li></ul><p>过程</p><ol><li>冷藏解冻, 室温解冻或者冷水解冻</li><li>不用水清洗, 用厨房纸擦干水分</li><li>室温回温至少 30 min 以上, 厚的 1 小时以上</li><li>抹上橄榄油, 两面用黑胡椒和盐调味</li><li>15s 一次翻面</li><li>醒肉</li></ol><h3 id="电饭锅煮鸡蛋"><a href="#电饭锅煮鸡蛋" class="headerlink" title="电饭锅煮鸡蛋"></a>电饭锅煮鸡蛋</h3><p>素材</p><ul><li>鸡蛋</li><li>水</li></ul><p>过程</p><ol><li><p>电饭锅铺上餐厨纸</p></li><li><p>均匀浇上 100ml 水</p></li><li><p>等待跳闸后闷 5 分钟</p></li><li><p>拿出放入凉水冷却好扒皮</p></li></ol><h3 id="蒸紫薯"><a href="#蒸紫薯" class="headerlink" title="蒸紫薯"></a>蒸紫薯</h3><p>素材:</p><ul><li>紫薯</li></ul><p>过程</p><ol><li><p>切块</p></li><li><p>蒸 10-20 分钟</p></li><li><p>去皮搅碎即可</p></li></ol><h3 id="煎鸡胸肉"><a href="#煎鸡胸肉" class="headerlink" title="煎鸡胸肉"></a>煎鸡胸肉</h3><p>素材:</p><ul><li>鸡胸</li></ul><p>过程</p><ol><li><p>解冻, 室温或者流水</p></li><li><p>切片或块, 更容易煎, 然后倒入生抽, 料酒和耗油腌制 30 分钟</p><ul><li>生抽, 料酒, 耗油腌制</li><li>黑胡椒, 海盐</li><li>盐, 胡椒, 卡真粉</li></ul></li><li><p>大火煎至两面金黄色</p></li></ol><h3 id="意面"><a href="#意面" class="headerlink" title="意面"></a>意面</h3><p>素材</p><ul><li>意面</li><li>味好美意面酱</li><li>牛肉碎</li><li>番茄</li></ul><p>过程</p><ol><li>沸水煮 10 分钟, 加一点盐, 捞出抹橄榄油备用</li><li>料酒, 淀粉腌制下牛肉碎, 放入炒锅开始炒</li><li>肉色变化后放入番茄</li><li>番茄差不多放入意面酱, 倒入200ml 水, 小火焖煮</li><li>放入意面炒差不多可以出锅了</li><li>最后放点黑胡椒, 味道不够可以加点黑胡椒酱</li></ol><h3 id="燕麦片"><a href="#燕麦片" class="headerlink" title="燕麦片"></a>燕麦片</h3><p>素材</p><ul><li>燕麦片</li><li>牛奶</li><li>香蕉</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;硬件&quot;&gt;&lt;a href=&quot;#硬件&quot; class=&quot;headerlink&quot; title=&quot;硬件&quot;&gt;&lt;/a&gt;硬件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;电饭锅&lt;/li&gt;
&lt;li&gt;电磁炉: 米家电磁炉青春版&lt;/li&gt;
&lt;li&gt;煎锅, 雪平锅&lt;/li&gt;
&lt;li&gt;厨房纸&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="生活" scheme="http://taizilongxu.github.io/wiki/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Float</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/Python/pythonFloat/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/Python/pythonFloat/</id>
    <published>2020-03-28T18:08:55.000Z</published>
    <updated>2020-03-28T18:10:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>代码位置: <code>Include/floatobject.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    <span class="keyword">double</span> ob_fval;</span><br><span class="line">&#125; PyFloatObject;</span><br></pre></td></tr></table></figure><h3 id="Type类型"><a href="#Type类型" class="headerlink" title="Type类型"></a>Type类型</h3><p>代码位置: <code>Objects/floatobject.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PyTypeObject PyFloat_Type = &#123;</span><br><span class="line">    PyVarObject_HEAD_INIT(&amp;PyType_Type, <span class="number">0</span>)</span><br><span class="line">    <span class="string">"float"</span>,</span><br><span class="line">    <span class="keyword">sizeof</span>(PyFloatObject),</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    (destructor)float_dealloc,                  <span class="comment">/* tp_dealloc */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    (reprfunc)float_repr,                       <span class="comment">/* tp_repr */</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_init */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_alloc */</span></span><br><span class="line">    float_new,                                  <span class="comment">/* tp_new */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Float 看来没啥东西</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;结构&quot;&gt;&lt;a href=&quot;#结构&quot; class=&quot;headerlink&quot; title=&quot;结构&quot;&gt;&lt;/a&gt;结构&lt;/h3&gt;&lt;p&gt;代码位置: &lt;code&gt;Include/floatobject.h&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="Python" scheme="http://taizilongxu.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>String</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/Python/pythonString/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/Python/pythonString/</id>
    <published>2020-03-28T18:03:41.000Z</published>
    <updated>2020-03-28T18:03:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料:</p><ul><li><p><a href="https://www.python.org/dev/peps/pep-0393/" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0393/</a></p></li><li><p><a href="https://docs.python.org/3/c-api/unicode.html#creating-and-accessing-unicode-strings" target="_blank" rel="noopener">https://docs.python.org/3/c-api/unicode.html#creating-and-accessing-unicode-strings</a></p></li><li><p><a href="https://rushter.com/blog/python-strings-and-memory/" target="_blank" rel="noopener">https://rushter.com/blog/python-strings-and-memory/</a></p></li><li><p><a href="https://timothybramlett.com/Strings_Bytes_and_Unicode_in_Python_2_and_3.html" target="_blank" rel="noopener">https://timothybramlett.com/Strings_Bytes_and_Unicode_in_Python_2_and_3.html</a></p></li><li><p><a href="https://nedbatchelder.com/text/unipain.html" target="_blank" rel="noopener">https://nedbatchelder.com/text/unipain.html</a></p></li><li><p><a href="https://www.cnblogs.com/c-x-a/p/11408372.html" target="_blank" rel="noopener">https://www.cnblogs.com/c-x-a/p/11408372.html</a></p></li></ul><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/python_string.png" alt=""></p><p>compact 和 legacy</p><ul><li>compact: 创建的时候知道长度和最大 character 的使用 compact, character 紧跟在 base structer 后面, 如果最大 character 小于 128 则使用 PyASCIIObject 结构, 如果大于 128 则使用 PyCompactUnicodeObject</li><li>legacy: 创建的时候不知道最大 character 的使用 legacy, 使用 PyUnicode_FromStringAndSize(NULL, length) 创建, 在内部他们的数据只保存在  wstr 里面. 当 PyUnicode_READY 被调用, data pointer 就被分配了. Resizing 只能在PyUnicode_READY 之前调用.</li></ul><p>kind</p><ul><li>00 =&gt; str is not initialized (data are in wstr)</li><li>01 =&gt; 1 byte (Latin-1)</li><li>10 =&gt; 2 byte (UCS-2)</li><li>11 =&gt; 4 byte (UCS-4)</li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>代码位置: <code>Include/cpython/unicodeobject.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* ASCII-only strings created through PyUnicode_New use the PyASCIIObject</span></span><br><span class="line"><span class="comment">   structure. state.ascii and state.compact are set, and the data</span></span><br><span class="line"><span class="comment">   immediately follow the structure. utf8_length and wstr_length can be found</span></span><br><span class="line"><span class="comment">   in the length field; the utf8 pointer is equal to the data pointer. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* There are 4 forms of Unicode strings:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       - compact ascii:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         * structure = PyASCIIObject</span></span><br><span class="line"><span class="comment">         * test: PyUnicode_IS_COMPACT_ASCII(op)</span></span><br><span class="line"><span class="comment">         * kind = PyUnicode_1BYTE_KIND</span></span><br><span class="line"><span class="comment">         * compact = 1</span></span><br><span class="line"><span class="comment">         * ascii = 1</span></span><br><span class="line"><span class="comment">         * ready = 1</span></span><br><span class="line"><span class="comment">         * (length is the length of the utf8 and wstr strings)</span></span><br><span class="line"><span class="comment">         * (data starts just after the structure)</span></span><br><span class="line"><span class="comment">         * (since ASCII is decoded from UTF-8, the utf8 string are the data)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       - compact:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         * structure = PyCompactUnicodeObject</span></span><br><span class="line"><span class="comment">         * test: PyUnicode_IS_COMPACT(op) &amp;&amp; !PyUnicode_IS_ASCII(op)</span></span><br><span class="line"><span class="comment">         * kind = PyUnicode_1BYTE_KIND, PyUnicode_2BYTE_KIND or</span></span><br><span class="line"><span class="comment">           PyUnicode_4BYTE_KIND</span></span><br><span class="line"><span class="comment">         * compact = 1</span></span><br><span class="line"><span class="comment">         * ready = 1</span></span><br><span class="line"><span class="comment">         * ascii = 0</span></span><br><span class="line"><span class="comment">         * utf8 is not shared with data</span></span><br><span class="line"><span class="comment">         * utf8_length = 0 if utf8 is NULL</span></span><br><span class="line"><span class="comment">         * wstr is shared with data and wstr_length=length</span></span><br><span class="line"><span class="comment">           if kind=PyUnicode_2BYTE_KIND and sizeof(wchar_t)=2</span></span><br><span class="line"><span class="comment">           or if kind=PyUnicode_4BYTE_KIND and sizeof(wchar_t)=4</span></span><br><span class="line"><span class="comment">         * wstr_length = 0 if wstr is NULL</span></span><br><span class="line"><span class="comment">         * (data starts just after the structure)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       - legacy string, not ready:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         * structure = PyUnicodeObject</span></span><br><span class="line"><span class="comment">         * test: kind == PyUnicode_WCHAR_KIND</span></span><br><span class="line"><span class="comment">         * length = 0 (use wstr_length)</span></span><br><span class="line"><span class="comment">         * hash = -1</span></span><br><span class="line"><span class="comment">         * kind = PyUnicode_WCHAR_KIND</span></span><br><span class="line"><span class="comment">         * compact = 0</span></span><br><span class="line"><span class="comment">         * ascii = 0</span></span><br><span class="line"><span class="comment">         * ready = 0</span></span><br><span class="line"><span class="comment">         * interned = SSTATE_NOT_INTERNED</span></span><br><span class="line"><span class="comment">         * wstr is not NULL</span></span><br><span class="line"><span class="comment">         * data.any is NULL</span></span><br><span class="line"><span class="comment">         * utf8 is NULL</span></span><br><span class="line"><span class="comment">         * utf8_length = 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       - legacy string, ready:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         * structure = PyUnicodeObject structure</span></span><br><span class="line"><span class="comment">         * test: !PyUnicode_IS_COMPACT(op) &amp;&amp; kind != PyUnicode_WCHAR_KIND</span></span><br><span class="line"><span class="comment">         * kind = PyUnicode_1BYTE_KIND, PyUnicode_2BYTE_KIND or</span></span><br><span class="line"><span class="comment">           PyUnicode_4BYTE_KIND</span></span><br><span class="line"><span class="comment">         * compact = 0</span></span><br><span class="line"><span class="comment">         * ready = 1</span></span><br><span class="line"><span class="comment">         * data.any is not NULL</span></span><br><span class="line"><span class="comment">         * utf8 is shared and utf8_length = length with data.any if ascii = 1</span></span><br><span class="line"><span class="comment">         * utf8_length = 0 if utf8 is NULL</span></span><br><span class="line"><span class="comment">         * wstr is shared with data.any and wstr_length = length</span></span><br><span class="line"><span class="comment">           if kind=PyUnicode_2BYTE_KIND and sizeof(wchar_t)=2</span></span><br><span class="line"><span class="comment">           or if kind=PyUnicode_4BYTE_KIND and sizeof(wchar_4)=4</span></span><br><span class="line"><span class="comment">         * wstr_length = 0 if wstr is NULL</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Compact strings use only one memory block (structure + characters),</span></span><br><span class="line"><span class="comment">       whereas legacy strings use one block for the structure and one block</span></span><br><span class="line"><span class="comment">       for characters.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Legacy strings are created by PyUnicode_FromUnicode() and</span></span><br><span class="line"><span class="comment">       PyUnicode_FromStringAndSize(NULL, size) functions. They become ready</span></span><br><span class="line"><span class="comment">       when PyUnicode_READY() is called.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       See also _PyUnicode_CheckConsistency().</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    Py_ssize_t length;          <span class="comment">/* Number of code points in the string */</span></span><br><span class="line">    Py_hash_t hash;             <span class="comment">/* Hash value; -1 if not set */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           SSTATE_NOT_INTERNED (0)</span></span><br><span class="line"><span class="comment">           SSTATE_INTERNED_MORTAL (1)</span></span><br><span class="line"><span class="comment">           SSTATE_INTERNED_IMMORTAL (2)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           If interned != SSTATE_NOT_INTERNED, the two references from the</span></span><br><span class="line"><span class="comment">           dictionary to this object are *not* counted in ob_refcnt.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> interned:<span class="number">2</span>;</span><br><span class="line">        <span class="comment">/* Character size:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           - PyUnicode_WCHAR_KIND (0):</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             * character type = wchar_t (16 or 32 bits, depending on the</span></span><br><span class="line"><span class="comment">               platform)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           - PyUnicode_1BYTE_KIND (1):</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             * character type = Py_UCS1 (8 bits, unsigned)</span></span><br><span class="line"><span class="comment">             * all characters are in the range U+0000-U+00FF (latin1)</span></span><br><span class="line"><span class="comment">             * if ascii is set, all characters are in the range U+0000-U+007F</span></span><br><span class="line"><span class="comment">               (ASCII), otherwise at least one character is in the range</span></span><br><span class="line"><span class="comment">               U+0080-U+00FF</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           - PyUnicode_2BYTE_KIND (2):</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             * character type = Py_UCS2 (16 bits, unsigned)</span></span><br><span class="line"><span class="comment">             * all characters are in the range U+0000-U+FFFF (BMP)</span></span><br><span class="line"><span class="comment">             * at least one character is in the range U+0100-U+FFFF</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           - PyUnicode_4BYTE_KIND (4):</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             * character type = Py_UCS4 (32 bits, unsigned)</span></span><br><span class="line"><span class="comment">             * all characters are in the range U+0000-U+10FFFF</span></span><br><span class="line"><span class="comment">             * at least one character is in the range U+10000-U+10FFFF</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> kind:<span class="number">3</span>;</span><br><span class="line">        <span class="comment">/* Compact is with respect to the allocation scheme. Compact unicode</span></span><br><span class="line"><span class="comment">           objects only require one memory block while non-compact objects use</span></span><br><span class="line"><span class="comment">           one block for the PyUnicodeObject struct and another for its data</span></span><br><span class="line"><span class="comment">           buffer. */</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> compact:<span class="number">1</span>;</span><br><span class="line">        <span class="comment">/* The string only contains characters in the range U+0000-U+007F (ASCII)</span></span><br><span class="line"><span class="comment">           and the kind is PyUnicode_1BYTE_KIND. If ascii is set and compact is</span></span><br><span class="line"><span class="comment">           set, use the PyASCIIObject structure. */</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> ascii:<span class="number">1</span>;</span><br><span class="line">        <span class="comment">/* The ready flag indicates whether the object layout is initialized</span></span><br><span class="line"><span class="comment">           completely. This means that this is either a compact object, or</span></span><br><span class="line"><span class="comment">           the data pointer is filled out. The bit is redundant, and helps</span></span><br><span class="line"><span class="comment">           to minimize the test in PyUnicode_IS_READY(). */</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">ready</span>:<span class="number">1</span>;</span><br><span class="line">        <span class="comment">/* Padding to ensure that PyUnicode_DATA() is always aligned to</span></span><br><span class="line"><span class="comment">           4 bytes (see issue #19537 on m68k). */</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> :<span class="number">24</span>;</span><br><span class="line">    &#125; state;</span><br><span class="line">    <span class="keyword">wchar_t</span> *wstr;              <span class="comment">/* wchar_t representation (null-terminated) */</span></span><br><span class="line">&#125; PyASCIIObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Non-ASCII strings allocated through PyUnicode_New use the</span></span><br><span class="line"><span class="comment">   PyCompactUnicodeObject structure. state.compact is set, and the data</span></span><br><span class="line"><span class="comment">   immediately follow the structure. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyASCIIObject _base;</span><br><span class="line">    Py_ssize_t utf8_length;     <span class="comment">/* Number of bytes in utf8, excluding the</span></span><br><span class="line"><span class="comment">                                 * terminating \0. */</span></span><br><span class="line">    <span class="keyword">char</span> *utf8;                 <span class="comment">/* UTF-8 representation (null-terminated) */</span></span><br><span class="line">    Py_ssize_t wstr_length;     <span class="comment">/* Number of code points in wstr, possible</span></span><br><span class="line"><span class="comment">                                 * surrogates count as two code points. */</span></span><br><span class="line">&#125; PyCompactUnicodeObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Strings allocated through PyUnicode_FromUnicode(NULL, len) use the</span></span><br><span class="line"><span class="comment">   PyUnicodeObject structure. The actual string data is initially in the wstr</span></span><br><span class="line"><span class="comment">   block, and copied into the data block using _PyUnicode_Ready. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyCompactUnicodeObject _base;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> *any;</span><br><span class="line">        Py_UCS1 *latin1;</span><br><span class="line">        Py_UCS2 *ucs2;</span><br><span class="line">        Py_UCS4 *ucs4;</span><br><span class="line">    &#125; data;                     <span class="comment">/* Canonical, smallest-form Unicode buffer */</span></span><br><span class="line">&#125; PyUnicodeObject;</span><br></pre></td></tr></table></figure><p>代码位置: <code>Objects/unicodeobject.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PyTypeObject PyUnicode_Type = &#123;</span><br><span class="line">    PyVarObject_HEAD_INIT(&amp;PyType_Type, <span class="number">0</span>)</span><br><span class="line">    <span class="string">"str"</span>,                        <span class="comment">/* tp_name */</span></span><br><span class="line">    <span class="keyword">sizeof</span>(PyUnicodeObject),      <span class="comment">/* tp_basicsize */</span></span><br><span class="line">    <span class="number">0</span>,                            <span class="comment">/* tp_itemsize */</span></span><br><span class="line">    <span class="comment">/* Slots */</span></span><br><span class="line">    (destructor)unicode_dealloc,  <span class="comment">/* tp_dealloc */</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="number">0</span>,                            <span class="comment">/* tp_init */</span></span><br><span class="line">    <span class="number">0</span>,                            <span class="comment">/* tp_alloc */</span></span><br><span class="line">    unicode_new,                  <span class="comment">/* tp_new */</span></span><br><span class="line">    PyObject_Del,                 <span class="comment">/* tp_free */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="C-接口"><a href="#C-接口" class="headerlink" title="C 接口"></a>C 接口</h3><p>代码位置: <code>Objects/unicodeobject.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">PyObject *</span><br><span class="line">PyUnicode_New(Py_ssize_t <span class="built_in">size</span>, Py_UCS4 maxchar)</span><br><span class="line">&#123;</span><br><span class="line">    PyObject *obj;</span><br><span class="line">    PyCompactUnicodeObject *unicode;</span><br><span class="line">    <span class="keyword">void</span> *data;</span><br><span class="line">    <span class="keyword">enum</span> PyUnicode_Kind kind;</span><br><span class="line">    <span class="keyword">int</span> is_sharing, is_ascii;</span><br><span class="line">    Py_ssize_t char_size;</span><br><span class="line">    Py_ssize_t struct_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Optimization for empty strings */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> == <span class="number">0</span> &amp;&amp; unicode_empty != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        Py_INCREF(unicode_empty);</span><br><span class="line">        <span class="keyword">return</span> unicode_empty;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    is_ascii = <span class="number">0</span>;</span><br><span class="line">    is_sharing = <span class="number">0</span>;</span><br><span class="line">    struct_size = <span class="keyword">sizeof</span>(PyCompactUnicodeObject);</span><br><span class="line">    <span class="keyword">if</span> (maxchar &lt; <span class="number">128</span>) &#123;</span><br><span class="line">        kind = PyUnicode_1BYTE_KIND;</span><br><span class="line">        char_size = <span class="number">1</span>;</span><br><span class="line">        is_ascii = <span class="number">1</span>;</span><br><span class="line">        struct_size = <span class="keyword">sizeof</span>(PyASCIIObject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (maxchar &lt; <span class="number">256</span>) &#123;</span><br><span class="line">        kind = PyUnicode_1BYTE_KIND;</span><br><span class="line">        char_size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (maxchar &lt; <span class="number">65536</span>) &#123;</span><br><span class="line">        kind = PyUnicode_2BYTE_KIND;</span><br><span class="line">        char_size = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">sizeof</span>(<span class="keyword">wchar_t</span>) == <span class="number">2</span>)</span><br><span class="line">            is_sharing = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxchar &gt; MAX_UNICODE) &#123;</span><br><span class="line">            PyErr_SetString(PyExc_SystemError,</span><br><span class="line">                            <span class="string">"invalid maximum character passed to PyUnicode_New"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        kind = PyUnicode_4BYTE_KIND;</span><br><span class="line">        char_size = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">sizeof</span>(<span class="keyword">wchar_t</span>) == <span class="number">4</span>)</span><br><span class="line">            is_sharing = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Ensure we won't overflow the size. */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        PyErr_SetString(PyExc_SystemError,</span><br><span class="line">                        <span class="string">"Negative size passed to PyUnicode_New"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> &gt; ((PY_SSIZE_T_MAX - struct_size) / char_size - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> PyErr_NoMemory();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Duplicated allocation code from _PyObject_New() instead of a call to</span></span><br><span class="line"><span class="comment">     * PyObject_New() so we are able to allocate space for the object and</span></span><br><span class="line"><span class="comment">     * it's data buffer.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    obj = (PyObject *) PyObject_MALLOC(struct_size + (<span class="built_in">size</span> + <span class="number">1</span>) * char_size);</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> PyErr_NoMemory();</span><br><span class="line">    obj = PyObject_INIT(obj, &amp;PyUnicode_Type);</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    unicode = (PyCompactUnicodeObject *)obj;</span><br><span class="line">    <span class="keyword">if</span> (is_ascii)</span><br><span class="line">        data = ((PyASCIIObject*)obj) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        data = unicode + <span class="number">1</span>;</span><br><span class="line">    _PyUnicode_LENGTH(unicode) = <span class="built_in">size</span>;</span><br><span class="line">    _PyUnicode_HASH(unicode) = <span class="number">-1</span>;</span><br><span class="line">    _PyUnicode_STATE(unicode).interned = <span class="number">0</span>;</span><br><span class="line">    _PyUnicode_STATE(unicode).kind = kind;</span><br><span class="line">    _PyUnicode_STATE(unicode).compact = <span class="number">1</span>;</span><br><span class="line">    _PyUnicode_STATE(unicode).<span class="built_in">ready</span> = <span class="number">1</span>;</span><br><span class="line">    _PyUnicode_STATE(unicode).ascii = is_ascii;</span><br><span class="line">    <span class="keyword">if</span> (is_ascii) &#123;</span><br><span class="line">        ((<span class="keyword">char</span>*)data)[<span class="built_in">size</span>] = <span class="number">0</span>;</span><br><span class="line">        _PyUnicode_WSTR(unicode) = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (kind == PyUnicode_1BYTE_KIND) &#123;</span><br><span class="line">        ((<span class="keyword">char</span>*)data)[<span class="built_in">size</span>] = <span class="number">0</span>;</span><br><span class="line">        _PyUnicode_WSTR(unicode) = <span class="literal">NULL</span>;</span><br><span class="line">        _PyUnicode_WSTR_LENGTH(unicode) = <span class="number">0</span>;</span><br><span class="line">        unicode-&gt;utf8 = <span class="literal">NULL</span>;</span><br><span class="line">        unicode-&gt;utf8_length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        unicode-&gt;utf8 = <span class="literal">NULL</span>;</span><br><span class="line">        unicode-&gt;utf8_length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (kind == PyUnicode_2BYTE_KIND)</span><br><span class="line">            ((Py_UCS2*)data)[<span class="built_in">size</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">/* kind == PyUnicode_4BYTE_KIND */</span></span><br><span class="line">            ((Py_UCS4*)data)[<span class="built_in">size</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (is_sharing) &#123;</span><br><span class="line">            _PyUnicode_WSTR_LENGTH(unicode) = <span class="built_in">size</span>;</span><br><span class="line">            _PyUnicode_WSTR(unicode) = (<span class="keyword">wchar_t</span> *)data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            _PyUnicode_WSTR_LENGTH(unicode) = <span class="number">0</span>;</span><br><span class="line">            _PyUnicode_WSTR(unicode) = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Py_DEBUG</span></span><br><span class="line">    unicode_fill_invalid((PyObject*)unicode, <span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    assert(_PyUnicode_CheckConsistency((PyObject*)unicode, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这边只是初始化内存空间, 根据长度和最大字符来进行初始化, 分位两种 PyCompactUnicodeObject 和 PyASCIIObject</p><h3 id="Intern"><a href="#Intern" class="headerlink" title="Intern"></a>Intern</h3><p>共享机制, 只对字母数字下划线的字符串进行共享</p><p>至此, 感觉理解差不多了, 对于更详细的等有空再来补充</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考资料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0393/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.python.org/dev/peps/
      
    
    </summary>
    
    
      <category term="Python" scheme="http://taizilongxu.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python 内建类型</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/Python/pythonInternalObject/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/Python/pythonInternalObject/</id>
    <published>2020-03-28T18:02:41.000Z</published>
    <updated>2020-03-28T18:02:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料:</p><ul><li><a href="https://flaggo.github.io/python3-source-code-analysis/objects/long-object/" target="_blank" rel="noopener">https://flaggo.github.io/python3-source-code-analysis/objects/long-object/</a></li></ul><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/pythonObject.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">typeobject</span> &#123;</span></span><br><span class="line">    PyObject_VAR_HEAD</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *tp_name; <span class="comment">/* For printing, in format "&lt;module&gt;.&lt;name&gt;" */</span></span><br><span class="line">    Py_ssize_t tp_basicsize, tp_itemsize; <span class="comment">/* For allocation */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">/* Method suites for standard classes */</span></span><br><span class="line"></span><br><span class="line">    PyNumberMethods *tp_as_number;</span><br><span class="line">    PySequenceMethods *tp_as_sequence;</span><br><span class="line">    PyMappingMethods *tp_as_mapping;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">/* Functions to access object as input/output buffer */</span></span><br><span class="line">    PyBufferProcs *tp_as_buffer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; PyTypeObject;</span><br></pre></td></tr></table></figure><ul><li>字段 tp_as_number 非空，因此 float 对象 <strong>支持数值型操作</strong> ；</li><li>字段 tp_as_sequence 为空，因此 float 对象 <strong>不支持序列型操作</strong> ；</li><li>字段 tp_as_mapping 为空，因此 float 对象 <strong>不支持关联型操作</strong> ；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考资料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://flaggo.github.io/python3-source-code-analysis/objects/long-object/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ht
      
    
    </summary>
    
    
      <category term="Python" scheme="http://taizilongxu.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>List</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/Python/pythonList/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/Python/pythonList/</id>
    <published>2020-03-28T17:45:08.000Z</published>
    <updated>2020-03-28T17:45:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th align="left">方法</th><th>备注</th></tr></thead><tbody><tr><td align="left">list.append(obj)</td><td>单个元素用 append</td></tr><tr><td align="left">list.count(obj)</td><td></td></tr><tr><td align="left">list.extend(seq)</td><td>通常用 + 代替, list + list</td></tr><tr><td align="left">list.insert(index, obj)</td><td></td></tr><tr><td align="left">list.pop([index=-1])</td><td></td></tr><tr><td align="left">list.remove(obj)</td><td></td></tr><tr><td align="left">list.reverse()</td><td>list[::-1]</td></tr><tr><td align="left">list.sort(cmp=None, key=None, reverse=False)</td><td>list.sort( key=lambda r: r[2])</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/python_list.png" alt=""></p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>代码位置: <code>Include/floatobject.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyObject_VAR_HEAD</span><br><span class="line">    <span class="comment">/* Vector of pointers to list elements.  list[0] is ob_item[0], etc. */</span></span><br><span class="line">    PyObject **ob_item;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ob_item contains space for 'allocated' elements.  The number</span></span><br><span class="line"><span class="comment">     * currently in use is ob_size.</span></span><br><span class="line"><span class="comment">     * Invariants:</span></span><br><span class="line"><span class="comment">     *     0 &lt;= ob_size &lt;= allocated</span></span><br><span class="line"><span class="comment">     *     len(list) == ob_size</span></span><br><span class="line"><span class="comment">     *     ob_item == NULL implies ob_size == allocated == 0</span></span><br><span class="line"><span class="comment">     * list.sort() temporarily sets allocated to -1 to detect mutations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Items must normally not be NULL, except during construction when</span></span><br><span class="line"><span class="comment">     * the list is not yet visible outside the function that builds it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Py_ssize_t allocated;</span><br><span class="line">&#125; PyListObject;</span><br></pre></td></tr></table></figure><ul><li>ob_size: 列表实际大小</li><li>allocated: 内存分配大小</li></ul><h3 id="Type-类型"><a href="#Type-类型" class="headerlink" title="Type 类型"></a>Type 类型</h3><p>代码位置: <code>Objects/listobject.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PyTypeObject PyList_Type = &#123;</span><br><span class="line">    PyVarObject_HEAD_INIT(&amp;PyType_Type, <span class="number">0</span>)</span><br><span class="line">    <span class="string">"list"</span>,</span><br><span class="line">    <span class="keyword">sizeof</span>(PyListObject),</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    (destructor)list_dealloc,                   <span class="comment">/* tp_dealloc */</span></span><br><span class="line">    ...</span><br><span class="line">    (initproc)list___init__,                    <span class="comment">/* tp_init */</span></span><br><span class="line">    PyType_GenericAlloc,                        <span class="comment">/* tp_alloc */</span></span><br><span class="line">    PyType_GenericNew,                          <span class="comment">/* tp_new */</span></span><br><span class="line">    PyObject_GC_Del,                            <span class="comment">/* tp_free */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>创建对象调用链:</p><p>PyType_GenericNew -&gt; PyType_GenericAlloc -&gt; PyObject_INIT_VAR</p><p>猜测因为 List 主要存储为动态数组, 内部结构直接使用 Generic 初始化了</p><h3 id="C-接口"><a href="#C-接口" class="headerlink" title="C 接口"></a>C 接口</h3><p>代码位置: <code>Objects/listobject.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">PyObject *</span><br><span class="line">PyList_New(Py_ssize_t <span class="built_in">size</span>)</span><br><span class="line">&#123;</span><br><span class="line">    PyListObject *op;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        PyErr_BadInternalCall();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// numfree 总共80个 list 对象数组, 可以共享</span></span><br><span class="line">    <span class="keyword">if</span> (numfree) &#123;</span><br><span class="line">        numfree--;</span><br><span class="line">        op = free_list[numfree];</span><br><span class="line">        _Py_NewReference((PyObject *)op);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        op = PyObject_GC_New(PyListObject, &amp;PyList_Type);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> &lt;= <span class="number">0</span>)</span><br><span class="line">        op-&gt;ob_item = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        op-&gt;ob_item = (PyObject **) PyMem_Calloc(<span class="built_in">size</span>, <span class="keyword">sizeof</span>(PyObject *));</span><br><span class="line">        <span class="keyword">if</span> (op-&gt;ob_item == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            Py_DECREF(op);</span><br><span class="line">            <span class="keyword">return</span> PyErr_NoMemory();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Py_SET_SIZE(op, <span class="built_in">size</span>);</span><br><span class="line">    op-&gt;allocated = <span class="built_in">size</span>;</span><br><span class="line">    _PyObject_GC_TRACK(op);</span><br><span class="line">    <span class="keyword">return</span> (PyObject *) op;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PyList_MAXFREELIST</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PyList_MAXFREELIST 80</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">static</span> PyListObject *free_list[PyList_MAXFREELIST];</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>本质是<code>动态数组</code></p></li><li><p>列表最大为 <code>1 &lt;&lt; 64</code></p></li><li><p>每次 append 会判断空间是否足够, 扩展办法:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* cpython/Objects/listobject.c */</span><br><span class="line">/* 空间增长的规律是:  <span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">35</span>, <span class="number">46</span>, <span class="number">58</span>, <span class="number">72</span>, <span class="number">88</span>, ... */</span><br><span class="line">/* 当前的: new_allocated = <span class="number">5</span> + (<span class="number">5</span> &gt;&gt; <span class="number">3</span>) + <span class="number">3</span> = <span class="number">8</span> */</span><br><span class="line">new_allocated = (size_t)newsize + (newsize &gt;&gt; 3) + (newsize &lt; 9 ? 3 : 6);</span><br></pre></td></tr></table></figure></li><li><p>使用 pop 方法时每次都会调用 resize 函数, 但是只有新申请空间比当前已有空间一半还小的时候被调用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* cpython/Objects/listobject.c */</span><br><span class="line">/* allocated: 8, newsize: 3, 8 &gt;= 3 &amp;&amp; (3 &gt;= 4?), 已经比一半还小了 */</span><br><span class="line"><span class="keyword">if</span> (allocated &gt;= newsize &amp;&amp; newsize &gt;= (allocated &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">    /* 如果当前空间没有比原空间一半还小 */</span><br><span class="line">    assert(self-&gt;ob_item != NULL || newsize == 0);</span><br><span class="line">    /* 只更改 ob_size 这个字段里的值即可 */</span><br><span class="line">    Py_SIZE(self) = newsize;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">/* ... */</span><br><span class="line">/* <span class="number">3</span> + (<span class="number">3</span> &gt;&gt; <span class="number">3</span>) + <span class="number">3</span> = <span class="number">6</span> */</span><br><span class="line">new_allocated = (size_t)newsize + (newsize &gt;&gt; 3) + (newsize &lt; 9 ? 3 : 6);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常用方法&quot;&gt;&lt;a href=&quot;#常用方法&quot; class=&quot;headerlink&quot; title=&quot;常用方法&quot;&gt;&lt;/a&gt;常用方法&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;方法&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Python" scheme="http://taizilongxu.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>unicode 和 UTF-8</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/%E6%9D%82%E9%A1%B9/unicode/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/%E6%9D%82%E9%A1%B9/unicode/</id>
    <published>2020-03-25T17:11:43.000Z</published>
    <updated>2020-05-27T13:21:18.222Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料:</p><ul><li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a></li><li><a href="https://www.edc4it.com/blog/general/character-encoding-unicode-utf-8-and-a-bit-of-chauvinism-explained-for-the-masses-2" target="_blank" rel="noopener">https://www.edc4it.com/blog/general/character-encoding-unicode-utf-8-and-a-bit-of-chauvinism-explained-for-the-masses-2</a></li></ul><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/unicode.png" alt=""></p><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>Byte order Mark 标记文本大小端</p><ul><li>UTF-8 不需要 BOM, 因为本身编码机制可以识别</li><li>UTF-16 和 UTF-32 需要 BOM</li><li>BOM 存在于微软系统中, Linux, Mac 无需考虑</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考资料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://ww
      
    
    </summary>
    
    
      <category term="杂项" scheme="http://taizilongxu.github.io/wiki/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>Python2 编码错误汇总</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/Python/pythonStringError/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/Python/pythonStringError/</id>
    <published>2020-03-24T18:00:57.000Z</published>
    <updated>2020-03-24T18:01:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/python_unicode_str.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/taizilongxu/img/master/img/python_unicode_str.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Python" scheme="http://taizilongxu.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Int</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/Python/pythonInt/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/Python/pythonInt/</id>
    <published>2020-03-21T05:02:06.000Z</published>
    <updated>2020-04-03T18:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料:</p><ul><li><a href="https://he11olx.com/2018/07/14/1.CPython3.6源码分析/1.1.Python整数对象/" target="_blank" rel="noopener">https://he11olx.com/2018/07/14/1.CPython3.6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.1.Python%E6%95%B4%E6%95%B0%E5%AF%B9%E8%B1%A1/</a></li><li><a href="https://flaggo.github.io/python3-source-code-analysis/objects/long-object/" target="_blank" rel="noopener">https://flaggo.github.io/python3-source-code-analysis/objects/long-object/</a></li><li><a href="https://rushter.com/blog/python-integer-implementation/" target="_blank" rel="noopener">https://rushter.com/blog/python-integer-implementation/</a></li></ul><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/python_long.png" alt=""></p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>代码位置: <code>Include/longintrepr.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">longobject</span> &#123;</span></span><br><span class="line">PyObject_VAR_HEAD</span><br><span class="line">digit ob_digit[<span class="number">1</span>];    <span class="comment">// digit 与平台相关，长度不一致</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="存储格式"><a href="#存储格式" class="headerlink" title="存储格式"></a>存储格式</h3><p><code>SUM(for i=0 through abs(ob_size)-1) ob_digit[i] * 2**(SHIFT*i)</code></p><p>例如 9223372043297226753 可以表示为<br>$$<br>1 * (2^{30})^0 + 6 * (2^{30})^1 + 8 *(2^{30})^2<br>$$<br>在 Python 内部表示为<br>ob_size: 3</p><p>ob_digit: [1, 6, 8]</p><p>Pylong_SHIFT: 30</p><p><a href="https://github.com/python/cpython/blob/865e4b4f630e2ae91e61239258abb58b488f1d65/Include/longintrepr.h#L9" target="_blank" rel="noopener">关于 PyLong_SHIFT 取值原因</a></p><h3 id="Type-类型"><a href="#Type-类型" class="headerlink" title="Type 类型"></a>Type 类型</h3><p>代码位置: <code>Objects/longobject.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PyTypeObject PyLong_Type = &#123;</span><br><span class="line">    PyVarObject_HEAD_INIT(&amp;PyType_Type, <span class="number">0</span>)</span><br><span class="line">    <span class="string">"int"</span>,                                      <span class="comment">/* tp_name */</span></span><br><span class="line">    offsetof(PyLongObject, ob_digit),           <span class="comment">/* tp_basicsize */</span></span><br><span class="line">    <span class="keyword">sizeof</span>(digit),                              <span class="comment">/* tp_itemsize */</span></span><br><span class="line">        ...</span><br><span class="line">    &amp;long_as_number,                            <span class="comment">/* tp_as_number */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_as_sequence */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_as_mapping */</span></span><br><span class="line">    long_new,                                   <span class="comment">/* tp_new */</span></span><br><span class="line">    PyObject_Del,                               <span class="comment">/* tp_free */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="New-初始化"><a href="#New-初始化" class="headerlink" title="New 初始化"></a>New 初始化</h3><p>代码位置: <code>Objects/clinic/longobject.c.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">long_new_impl(PyTypeObject *type, PyObject *x, PyObject *obase);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">long_new(PyTypeObject *type, PyObject *args, PyObject *kwargs)</span><br><span class="line">&#123;</span><br><span class="line">    PyObject *return_value = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">const</span> _keywords[] = &#123;<span class="string">""</span>, <span class="string">"base"</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> _PyArg_Parser _parser = &#123;<span class="string">"|OO:int"</span>, _keywords, <span class="number">0</span>&#125;;</span><br><span class="line">    PyObject *x = <span class="literal">NULL</span>;</span><br><span class="line">    PyObject *obase = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!_PyArg_ParseTupleAndKeywordsFast(args, kwargs, &amp;_parser,</span><br><span class="line">        &amp;x, &amp;obase)) &#123;</span><br><span class="line">        <span class="keyword">goto</span> <span class="built_in">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return_value = long_new_impl(type, x, obase);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>:</span><br><span class="line">    <span class="keyword">return</span> return_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码位置: <code>Objects/longobject.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">long_new_impl(PyTypeObject *type, PyObject *x, PyObject *obase)</span><br><span class="line"><span class="comment">/*[clinic end generated code: output=e47cfe777ab0f24c input=81c98f418af9eb6f]*/</span></span><br><span class="line">&#123;</span><br><span class="line">    Py_ssize_t base;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type != &amp;PyLong_Type)</span><br><span class="line">        <span class="keyword">return</span> long_subtype_new(type, x, obase); <span class="comment">/* Wimp out */</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obase != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            PyErr_SetString(PyExc_TypeError,</span><br><span class="line">                            <span class="string">"int() missing string argument"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> PyLong_FromLong(<span class="number">0L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obase == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> PyNumber_Long(x);</span><br><span class="line"></span><br><span class="line">    base = PyNumber_AsSsize_t(obase, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (base == <span class="number">-1</span> &amp;&amp; PyErr_Occurred())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> ((base != <span class="number">0</span> &amp;&amp; base &lt; <span class="number">2</span>) || base &gt; <span class="number">36</span>) &#123;</span><br><span class="line">        PyErr_SetString(PyExc_ValueError,</span><br><span class="line">                        <span class="string">"int() base must be &gt;= 2 and &lt;= 36, or 0"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PyUnicode_Check(x))</span><br><span class="line">        <span class="keyword">return</span> PyLong_FromUnicodeObject(x, (<span class="keyword">int</span>)base);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (PyByteArray_Check(x) || PyBytes_Check(x)) &#123;</span><br><span class="line">        <span class="keyword">char</span> *<span class="built_in">string</span>;</span><br><span class="line">        <span class="keyword">if</span> (PyByteArray_Check(x))</span><br><span class="line">            <span class="built_in">string</span> = PyByteArray_AS_STRING(x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">string</span> = PyBytes_AS_STRING(x);</span><br><span class="line">        <span class="keyword">return</span> _PyLong_FromBytes(<span class="built_in">string</span>, Py_SIZE(x), (<span class="keyword">int</span>)base);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        PyErr_SetString(PyExc_TypeError,</span><br><span class="line">                        <span class="string">"int() can't convert non-string with explicit base"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>x == NULL 且 obase != NULL 调用 PyLong_FromLong</li><li>obase 为 NULL 调用 PyNumber_Long</li><li>x 和 obase 都不为 NULL<ul><li>PyUnicode 调用 PyLong_FromUnicodeObject，最终调用 PyLong_FromString</li><li>PyByteArray/PyBytes 调用_PyLong_FromBytes，最终调用 PyLong_FromString</li></ul></li></ul><h3 id="C-接口"><a href="#C-接口" class="headerlink" title="C 接口"></a>C 接口</h3><p>代码位置: <code>Include/longobject.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PyObject* <span class="title">PyLong_FromLong</span><span class="params">(<span class="keyword">long</span> v)</span></span></span><br><span class="line"><span class="function">PyObject* <span class="title">PyLong_FromUnsignedLong</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> v)</span></span></span><br><span class="line"><span class="function">PyObject* <span class="title">PyLong_FromSsize_t</span><span class="params">(Py_ssize_t v)</span></span></span><br><span class="line"><span class="function">PyObject* <span class="title">PyLong_FromSize_t</span><span class="params">(<span class="keyword">size_t</span> v)</span></span></span><br><span class="line"><span class="function">PyObject* <span class="title">PyLong_FromLongLong</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> v)</span></span></span><br><span class="line"><span class="function">PyObject* <span class="title">PyLong_FromUnsignedLongLong</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> v)</span></span></span><br><span class="line"><span class="function">PyObject* <span class="title">PyLong_FromDouble</span><span class="params">(<span class="keyword">double</span> v)</span></span></span><br><span class="line"><span class="function">PyObject* <span class="title">PyLong_FromString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">char</span> **pend, <span class="keyword">int</span> base)</span></span></span><br><span class="line"><span class="function">PyObject* <span class="title">PyLong_FromUnicode</span><span class="params">(Py_UNICODE *u, Py_ssize_t length, <span class="keyword">int</span> base)</span></span></span><br><span class="line"><span class="function">PyObject* <span class="title">PyLong_FromUnicodeObject</span><span class="params">(PyObject *u, <span class="keyword">int</span> base)</span></span></span><br><span class="line"><span class="function">PyObject* <span class="title">PyLong_FromVoidPtr</span><span class="params">(<span class="keyword">void</span> *p)</span></span></span><br></pre></td></tr></table></figure><p>代码位置: <code>Objects/longobject.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PyObject *</span><br><span class="line">PyLong_FromLong(<span class="keyword">long</span> ival)</span><br><span class="line">&#123;</span><br><span class="line">    PyLongObject *v;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> abs_ival;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> t;  <span class="comment">/* unsigned so &gt;&gt; doesn't propagate sign bit */</span></span><br><span class="line">    <span class="keyword">int</span> ndigits = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sign;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (IS_SMALL_INT(ival)) &#123;</span><br><span class="line">        <span class="keyword">return</span> get_small_int((sdigit)ival);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Fast path for single-digit ints */</span></span><br><span class="line">    <span class="keyword">if</span> (!(abs_ival &gt;&gt; PyLong_SHIFT)) &#123;</span><br><span class="line">        v = _PyLong_New(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (v) &#123;</span><br><span class="line">            Py_SET_SIZE(v, sign);</span><br><span class="line">            v-&gt;ob_digit[<span class="number">0</span>] = Py_SAFE_DOWNCAST(</span><br><span class="line">                abs_ival, <span class="keyword">unsigned</span> <span class="keyword">long</span>, digit);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (PyObject*)v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>small_ints 数组长度，默认<code>[-5, 256]</code></li><li>小整型会缓存, 只增加引用</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考资料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://he11olx.com/2018/07/14/1.CPython3.6源码分析/1.1.Python整数对象/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://he11o
      
    
    </summary>
    
    
      <category term="Python" scheme="http://taizilongxu.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python Object</title>
    <link href="http://taizilongxu.github.io/wiki/wiki/Python/pythonObject/"/>
    <id>http://taizilongxu.github.io/wiki/wiki/Python/pythonObject/</id>
    <published>2020-03-19T17:28:04.000Z</published>
    <updated>2020-03-19T17:28:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>资料:</p><ul><li><a href="https://github.com/zpoint/CPython-Internals" target="_blank" rel="noopener">https://github.com/zpoint/CPython-Internals</a></li><li><a href="https://python.fasionchan.com/zh_CN/latest/source/object-model/pyobject.html" target="_blank" rel="noopener">https://python.fasionchan.com/zh_CN/latest/source/object-model/pyobject.html</a></li><li><a href="https://blog.csdn.net/Lzs1998/article/details/103907147?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/Lzs1998/article/details/103907147?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></li></ul><p>当前版本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/python/cpython.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> cpython</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard 6672c16b1d7f83789bf3a2016bd19edfd3568e71</span></span><br></pre></td></tr></table></figure><h2 id="PyObject"><a href="#PyObject" class="headerlink" title="PyObject"></a>PyObject</h2><p>代码地址: <code>Include/object.h</code></p><p>定长对象 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">object</span> &#123;</span></span><br><span class="line">    _PyObject_HEAD_EXTRA</span><br><span class="line">    Py_ssize_t ob_refcnt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">typeobject</span> *<span class="title">ob_type</span>;</span></span><br><span class="line">&#125; PyObject;</span><br></pre></td></tr></table></figure><ul><li>_PyObject_HEAD_EXTRA: Debug 用, 可以忽略</li><li>ob_refnt: 引用计数, 垃圾回收使用</li><li>ob_type: 类型指针, 指向对象的类型对象</li></ul><p>变长对象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyObject ob_base;</span><br><span class="line">    Py_ssize_t ob_size; <span class="comment">/* Number of items in variable part */</span></span><br><span class="line">&#125; PyVarObject;</span><br></pre></td></tr></table></figure><h2 id="PyTypeObject"><a href="#PyTypeObject" class="headerlink" title="PyTypeObject"></a>PyTypeObject</h2><p>代码位置: <code>Include/cpython/object.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">typeobject</span> &#123;</span></span><br><span class="line">    PyObject_VAR_HEAD</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *tp_name; <span class="comment">/* For printing, in format "&lt;module&gt;.&lt;name&gt;" */</span></span><br><span class="line">    Py_ssize_t tp_basicsize, tp_itemsize; <span class="comment">/* For allocation */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Methods to implement standard operations */</span></span><br><span class="line">    destructor tp_dealloc;</span><br><span class="line">    printfunc tp_print;</span><br><span class="line"></span><br><span class="line">    getattrfunc tp_getattr;</span><br><span class="line">    setattrfunc tp_setattr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">/* Attribute descriptor and subclassing stuff */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">typeobject</span> *<span class="title">tp_base</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125; PyTypeObject;</span><br></pre></td></tr></table></figure><ul><li>tp_name: 类型名称</li><li>tp_basicsize, tp_itemsize: 创建实例对象所需内存信息</li><li>tp_print, tp_getattr: 该类型支持的相关操作信息</li></ul><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/python_struct.png" alt=""></p><h2 id="PyType-Type-type"><a href="#PyType-Type-type" class="headerlink" title="PyType_Type(type)"></a>PyType_Type(type)</h2><p>代码位置: <code>Objects/typeobject.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PyTypeObject PyType_Type = &#123;</span><br><span class="line">    PyVarObject_HEAD_INIT(&amp;PyType_Type, <span class="number">0</span>)</span><br><span class="line">    <span class="string">"type"</span>,                                     <span class="comment">/* tp_name */</span></span><br><span class="line">    <span class="keyword">sizeof</span>(PyHeapTypeObject),                   <span class="comment">/* tp_basicsize */</span></span><br><span class="line">    <span class="keyword">sizeof</span>(PyMemberDef),                        <span class="comment">/* tp_itemsize */</span></span><br><span class="line">    (destructor)type_dealloc,                   <span class="comment">/* tp_dealloc */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    (reprfunc)type_repr,                        <span class="comment">/* tp_repr */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>内建类型和自定义类对应的 <code>PyTypeObject</code> 都是通过 <code>PyTypeType</code> 创建的, 被称作 <code>元类型(meta class)</code></li><li><code>PyType_Type</code> 将自己的 ob_type 设置成自己</li></ul><h2 id="PyBaseObject-Type-object"><a href="#PyBaseObject-Type-object" class="headerlink" title="PyBaseObject_Type(object)"></a>PyBaseObject_Type(object)</h2><p>代码位置: <code>Objects/typeobject.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PyTypeObject PyBaseObject_Type = &#123;</span><br><span class="line">    PyVarObject_HEAD_INIT(&amp;PyType_Type, <span class="number">0</span>)</span><br><span class="line">    <span class="string">"object"</span>,                                   <span class="comment">/* tp_name */</span></span><br><span class="line">    <span class="keyword">sizeof</span>(PyObject),                           <span class="comment">/* tp_basicsize */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_itemsize */</span></span><br><span class="line">    object_dealloc,                             <span class="comment">/* tp_dealloc */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    object_repr,                                <span class="comment">/* tp_repr */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> <img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/python_type_object.png" alt=""></p><p>总结</p><ul><li>Type 是所有实例化对象的爸爸</li><li>Object 是为了确认类和父类的关系在创建对象时</li></ul><h2 id="创建对象过程"><a href="#创建对象过程" class="headerlink" title="创建对象过程"></a>创建对象过程</h2><p><code>pi = float(&#39;3.14&#39;)</code> 通过 Python 的 interpreter 我们可以翻译出这个语句是实例化 float 的过程, 这个过程即 type 来统一创建对象的流程(可以通过学习 Cpython 加深理解)</p><p><img src="https://raw.githubusercontent.com/taizilongxu/img/master/img/python_object_create.png" alt=""></p><ol><li>调用 float ， Python 最终执行其类型对象 type 的 tp_call 函数；</li><li>tp_call 函数调用 float 的 tp_new 函数为实例对象分配 <strong>内存空间</strong> ；</li><li>tp_call 函数必要时进一步调用 tp_init 函数对实例对象进行 <strong>初始化</strong> ；</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;资料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zpoint/CPython-Internals&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/zpoint/CPython-I
      
    
    </summary>
    
    
      <category term="Python" scheme="http://taizilongxu.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
</feed>
